<?php

final class PhabricatorYubikeyAuthFactor extends PhabricatorAuthFactor {

  const SETUP_ROUNDS = 5;

  public function getFactorKey() {
    return 'yubiotp';
  }

  public function getFactorName() {
    return pht('Yubikey OTP');
  }

  public function getFactorDescription() {
    return pht(
      'Attach a YubiKey to your account. When you need to '.
      'authenticate, you will need to enter a code generated by your key');
  }

  public function processAddFactorForm(
    AphrontFormView $form,
    AphrontRequest $request,
    PhabricatorUser $user) {

    $codes = [];
    $e_codes = [];
    for ($ii = 0; $ii < self::SETUP_ROUNDS; $ii++) {
      $codeRaw = $request->getStr('yubiotpcode'.$ii);

      // Only read the first line.
      $code = explode("\r\n", $codeRaw)[0];

      $codes[$ii] = $code;
      $e_codes[$ii] = true;
    }

    if ($request->getExists('yubiotp')) {
      $okay = true;
      $seen = [];

      $yubikey_id = self::extractYubikeyId($codes[0]);

      // To make sure the user actually owns a key, we ask them to provide
      // multiple codes generated by the key.
      for ($ii = 0; $ii < self::SETUP_ROUNDS; $ii++) {
        $code = $codes[$ii];

        // Make sure that the codes provided do not repeat.
        if (array_key_exists($code, $seen)) {
          $e_codes[$ii] = pht('Repeated');
          $okay = false;

          break;
        }
        $seen[$code] = true;

        // Check that every key belongs to the same Yubikey ID.
        $current_yubikey_id = self::extractYubikeyId($code);
        if ($current_yubikey_id != $yubikey_id) {
          $e_codes[$ii] = pht('Invalid');
          $okay = false;

          break;
        }

        if (!self::verifyYubikeyOTPCode($yubikey_id, $code)) {
          if (!strlen($code)) {
            $e_codes[$ii] = pht('Required');
          } else {
            $e_codes[$ii] = pht('Invalid');
          }

          $okay = false;
          break;
        }
      }

      if ($okay) {
        $yubikey_id = self::extractYubikeyId($codes[0]);

        $config = $this->newConfigForUser($user)
          ->setFactorName(pht('Yubikey OTP'))
          ->setFactorSecret($yubikey_id);

        return $config;
      }
    }

    $form->addHiddenInput('yubiotp', true);

    $form->appendInstructions(
      pht(
        'Plug in your Yubikey to a USB port, and press the metal area of the '.
        'key for each of the following fields:'));

    for ($ii = 0; $ii < self::SETUP_ROUNDS; $ii++) {
      $form->appendChild(
        id(new AphrontFormTextAreaControl())
          ->setLabel(pht('OTP Code #%d:', $ii))
          ->setName('yubiotpcode'.$ii)
          ->setHeight(AphrontFormTextAreaControl::HEIGHT_VERY_SHORT)
          ->setValue($codes[$ii])
          ->setError($e_codes[$ii]));
    }

  }


  public function renderValidateFactorForm(
    PhabricatorAuthFactorConfig $config,
    AphrontFormView $form,
    PhabricatorUser $viewer,
    $validation_result) {

    if (!$validation_result) {
      $validation_result = array();
    }

    $form->appendChild(
      id(new AphrontFormTextControl())
        ->setName($this->getParameterName($config, 'yubiotpcode'))
        ->setLabel(pht('Yubikey OTP'))
        ->setCaption(pht('Factor Name: %s', $config->getFactorName()))
        ->setValue(idx($validation_result, 'value'))
        ->setError(idx($validation_result, 'error', true)));
  }


  public function processValidateFactorForm(
    PhabricatorAuthFactorConfig $config,
    PhabricatorUser $viewer,
    AphrontRequest $request) {

    $code = $request->getStr($this->getParameterName($config, 'yubiotpcode'));
    $yubikey_id = $config->getFactorSecret();

    if (self::verifyYubikeyOTPCode($yubikey_id, $code)) {
      return array(
        'error' => null,
        'value' => $code,
        'valid' => true,
      );
    } else {
      return array(
        'error' => strlen($code) ? pht('Invalid') : pht('Required'),
        'value' => $code,
        'valid' => false,
      );
    }
  }


  public static function verifyYubikeyOTPCode(
    $yubikey_id,
    $code) {

    $current_yubikey_id = self::extractYubikeyId($code);

    if ($yubikey_id != $current_yubikey_id) {
      return false;
    }

    $root = dirname(phutil_get_library_root('phabricator-yubikey'));
    require_once $root.'/externals/yubicloud/yubicloud.php';

    $api_id = PhabricatorEnv::getEnvConfig('yubikey.api_id');
    $api_key = PhabricatorEnv::getEnvConfig('yubikey.api_key');

    $yubicloud = new Yubicloud($api_id, $api_key);
    $result = $yubicloud->checkOnYubiCloud($code);

    return ($result === 'OK');
  }


  public static function extractYubikeyId($code) {
      return substr($code, 0, 12);
  }


}
